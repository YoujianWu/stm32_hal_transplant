用keil仿真调试时，应该注意的：
1.使用logic analyze分析波形时，如果想要看IO口波形，选择“setup”，然后设置
  (PORTA & 0x08) >> 3，也就是选择PA3,接着数据类型选bits，否则会无法显示波形。

移植标准库/HAL库的注意事项：
1.启动文件要单独放在一个文件夹StartUp里面。（上电时第一个跑的程序）
2.内核驱动文件、外设描述文件、system启动文件要单独放在一个文件夹Start里面。（固件库）
3.标准库/HAL库单独放在Libararies里面，另外还有中断库文件（.c/.h）和库的配置文件（config）
  以及msp（如果有的话）。
4.自己的外设驱动放在Hardware里面
5.User文件夹放应用层文件，main函数，system文件（系统滴答、HAL库、时钟初始化），config
（包含常用库和system）文件等。
6.移植的所以文件可以在ST提供的固件包里找到，其他所需要的文件或者main函数还可以去里面的例程里面找，
库里面可能会有template后缀的库文件，删除即可。
7.移植过程中，先不要添加标准库/HAL库进入项目编译，先加入StartUp、Start、User编译，保证固件库编
译通过后，再添加库文件进行编译，所有的“main.h”都换成"config.h"

在源文件里面声明了全局变量struct Timer mtimer1，然后又在头文件里面extern struct Timer mtimer1，是为了
保证编译时，不会出现多次包含头文件，导致变量冲突的问题

Multi_timer使用时，记得将timer_ticks()放在SysTick_Handler()里面，给它的定时器提供时基，因为HAL_SYSTICK_IRQHandler
在中断向量表里没写，没办法调用，可能是因为STM32F1系列的问题吗？

Multi_Button 要在 5ms 定时器中断中调用button_ticks()，5ms扫描一次按键，非常方便

当外部事件或内部事件满足条件时，会触发中断，调用中断向量表指向的函数，多个中断则按照优先级触发，重写中断函数有两种：
1.重写USART1_IRQHandler（中断向量表指向的函数），可以在里面实现自己的功能
2.重写HAL_UART_TxCpltCallback（中断会先触发USART1_IRQHandler，然后调用HAL_UART_IRQHandler(&huart1)，在这个
函数里面会调用HAL_UART_TxCpltCallback，所以我们只需要重写这个回调函数即可，具体可以看it.c中断库）

Gpio中断模式：
External Interrupt Mode with Falling edge trigger detection(外部中断模式):
“我检测到下降沿了，请CPU马上来处理！”
External Event Mode with Falling edge trigger detection(外部事件模式)：
“我检测到下降沿了，直接通知ADC开始采样，不用打扰CPU。”